<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\T4Functions.ttinc" #>
<#@ output extension=".cs" #>
/*****************************************************************************************
 * This code was generated by a tool.                                                    *
 * Please do not modify this file directly - modify VersionClient18_1.Methods.tt instead *
 *****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using PrtgAPI.Parameters;

namespace PrtgAPI.Request
{
    internal partial class VersionClient18_1
    {
<#
for(int i = 0; i < 2; i++)
{
#>
        internal override <#= GetSignature("SetChannelProperty", "void", i) #>(int[] sensorIds, int channelId, List<Channel> channels, ChannelParameter[] @params, Tuple<ChannelProperty, object> versionSpecific = null)
        {
            if (NeedsLimit(@params))
            {
                <#= DeclareFunc("getChannels", "s", "int", "client.GetChannelsInternal", "s, idFilter: i => i == channelId", "IEnumerable<Channel>", i) #>;

                if(channels == null)
                {
                    channels = new List<Channel>();

                    foreach(var id in sensorIds)
                    {
                        channels.AddRange(<#= CallFunc("getChannels", "id", i) #>);
                    }
                }

                if (channels.Count == 0)
                {
                    var plural = sensorIds.Length > 1 ? "s" : "";
                    throw new InvalidOperationException($"Channel ID {channelId} does not exist on sensor ID{plural} {string.Join(", ", sensorIds)}");
                }

                var groups = GetGroupedChannels(channels, channelId, @params);

                foreach (var group in groups)
                {
                    <#= CallFunction("base.SetChannelProperty", "group.Item2.Select(c => c.SensorId).ToArray(), channelId, null, @params, Tuple.Create(group.Item3, (object)group.Item1)", i) #>;
                }
            }
            else
                <#= CallFunction("base.SetChannelProperty", "sensorIds, channelId, null, @params", i) #>;
        }
<#
if(i == 0)
    WriteLine("");
}
#>
    }
}
