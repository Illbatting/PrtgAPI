/*****************************************************************************************
 * This code was generated by a tool.                                                    *
 * Please do not modify this file directly - modify VersionClient18_1.Methods.tt instead *
 *****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace PrtgAPI.Request
{
    internal partial class VersionClient18_1
    {
        internal override void SetChannelProperty(int[] sensorIds, int channelId, List<Channel> channels, ChannelProperty property, object value, Tuple<ChannelProperty, object> versionSpecific = null)
        {
            if (property == ChannelProperty.ErrorLimitMessage || property == ChannelProperty.WarningLimitMessage || (property == ChannelProperty.LimitsEnabled && IsTrue(value)))
            {
                Func<int, IEnumerable<Channel>> getChannels = (s) => client.GetChannelsInternal(s, idFilter: i => i == channelId);

                if(channels == null)
                {
                    channels = new List<Channel>();

                    foreach(var id in sensorIds)
                    {
                        channels.AddRange(getChannels(id));
                    }
                }

                var groups = GetGroupedChannels(channels, channelId, property, value);

                foreach (var group in groups)
                {
                    base.SetChannelProperty(group.Item2.Select(c => c.SensorId).ToArray(), channelId, null, property, value, Tuple.Create(group.Item3, (object)group.Item1));
                }
            }
            else
                base.SetChannelProperty(sensorIds, channelId, null, property, value);
        }

        internal override async Task SetChannelPropertyAsync(int[] sensorIds, int channelId, List<Channel> channels, ChannelProperty property, object value, Tuple<ChannelProperty, object> versionSpecific = null)
        {
            if (property == ChannelProperty.ErrorLimitMessage || property == ChannelProperty.WarningLimitMessage || (property == ChannelProperty.LimitsEnabled && IsTrue(value)))
            {
                Func<int, Task<IEnumerable<Channel>>> getChannels = async (s) => await client.GetChannelsInternalAsync(s, idFilter: i => i == channelId).ConfigureAwait(false);

                if(channels == null)
                {
                    channels = new List<Channel>();

                    foreach(var id in sensorIds)
                    {
                        channels.AddRange(await getChannels(id).ConfigureAwait(false));
                    }
                }

                var groups = GetGroupedChannels(channels, channelId, property, value);

                foreach (var group in groups)
                {
                    await base.SetChannelPropertyAsync(group.Item2.Select(c => c.SensorId).ToArray(), channelId, null, property, value, Tuple.Create(group.Item3, (object)group.Item1)).ConfigureAwait(false);
                }
            }
            else
                await base.SetChannelPropertyAsync(sensorIds, channelId, null, property, value).ConfigureAwait(false);
        }
    }
}
