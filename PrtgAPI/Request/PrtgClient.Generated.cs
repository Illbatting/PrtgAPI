/***************************************************************************************
 * This code was generated by a tool.                                                  *
 * Please do not modify this file directly - modify PrtgClient.AsyncHelpers.tt instead *
 ***************************************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Http;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Threading;
using System.Xml.Linq;
using PrtgAPI.Attributes;
using PrtgAPI.Helpers;
using PrtgAPI.Objects.Deserialization;
using PrtgAPI.Objects.Shared;
using PrtgAPI.Parameters;
using PrtgAPI.Request;

//Methods with complex logic surrounding sync/async function calls.
//For each method, two variants a generated. A synchronous method with the
//expected return type, and an async method that implicitly wraps the result
//in a Task

namespace PrtgAPI
{
    public partial class PrtgClient
    {
        //######################################
        // GetChannelsInternal
        //######################################

        internal List<Channel> GetChannelsInternal(int sensorId, Func<string, bool> nameFilter = null, Func<int, bool> idFilter = null)
        {
            if (nameFilter == null)
                nameFilter = n => true;

            if (idFilter == null)
                idFilter = i => true;

            var response = RequestEngine.ExecuteRequest(new ChannelParameters(sensorId));

            response.Descendants("item").Where(item => item.Element("objid").Value == "-4").Remove();

            var items = response.Descendants("item").ToList();

            items.Where(e => 
                !nameFilter(e.Element("name").Value?.ToString()) ||
                !idFilter(Convert.ToInt32(e.Element("objid").Value.ToString()))
            ).Remove();

            items = response.Descendants("item").ToList();

            foreach (var item in items)
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = GetChannelProperties(sensorId, id);

                item.Add(properties.Nodes());
                item.Add(new XElement("injected_sensorId", sensorId));
            }

            if (items.Count > 0)
                return XmlDeserializer<Channel>.DeserializeList(response).Items;

            return new List<Channel>();
        }

        internal async Task<List<Channel>> GetChannelsInternalAsync(int sensorId, Func<string, bool> nameFilter = null, Func<int, bool> idFilter = null)
        {
            if (nameFilter == null)
                nameFilter = n => true;

            if (idFilter == null)
                idFilter = i => true;

            var response = await RequestEngine.ExecuteRequestAsync(new ChannelParameters(sensorId)).ConfigureAwait(false);

            response.Descendants("item").Where(item => item.Element("objid").Value == "-4").Remove();

            var items = response.Descendants("item").ToList();

            items.Where(e => 
                !nameFilter(e.Element("name").Value?.ToString()) ||
                !idFilter(Convert.ToInt32(e.Element("objid").Value.ToString()))
            ).Remove();

            items = response.Descendants("item").ToList();

            await Task.WhenAll(items.Select(async item =>
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = await GetChannelPropertiesAsync(sensorId, id).ConfigureAwait(false);

                item.Add(properties.Nodes());
                item.Add(new XElement("injected_sensorId", sensorId));
            })).ConfigureAwait(false);

            if (items.Count > 0)
                return XmlDeserializer<Channel>.DeserializeList(response).Items;

            return new List<Channel>();
        }

        //######################################
        // GetNotificationActionsInternal
        //######################################

        internal List<NotificationAction> GetNotificationActionsInternal(NotificationActionParameters parameters)
        {
            var response = RequestEngine.ExecuteRequest(parameters);

            var items = response.Descendants("item").ToList();

            foreach (var item in items)
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = GetNotificationActionProperties(id);

                item.Add(properties.Nodes());
            }

            var actions = XmlDeserializer<NotificationAction>.DeserializeList(response).Items;

            var actionsWithSchedules = ResponseParser.GroupActionSchedules(actions).ToList();

            UpdateActionSchedules(actionsWithSchedules);

            return actions;
        }

        internal async Task<List<NotificationAction>> GetNotificationActionsInternalAsync(NotificationActionParameters parameters)
        {
            var response = await RequestEngine.ExecuteRequestAsync(parameters).ConfigureAwait(false);

            var items = response.Descendants("item").ToList();

            await Task.WhenAll(items.Select(async item =>
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = await GetNotificationActionPropertiesAsync(id).ConfigureAwait(false);

                item.Add(properties.Nodes());
            })).ConfigureAwait(false);

            var actions = XmlDeserializer<NotificationAction>.DeserializeList(response).Items;

            var actionsWithSchedules = ResponseParser.GroupActionSchedules(actions).ToList();

            await UpdateActionSchedulesAsync(actionsWithSchedules).ConfigureAwait(false);

            return actions;
        }

        //######################################
        // GetSchedulesInternal
        //######################################

        internal List<Schedule> GetSchedulesInternal(ScheduleParameters parameters)
        {
            var schedules = ObjectEngine.GetObjects<Schedule>(parameters);

            foreach (var schedule in schedules)
            {
                var response = GetObjectPropertiesRawInternal(schedule.Id, ObjectType.Schedule);
                ResponseParser.LoadTimeTable(schedule, response);
            }

            return schedules;
        }

        internal async Task<List<Schedule>> GetSchedulesInternalAsync(ScheduleParameters parameters)
        {
            var schedules = await ObjectEngine.GetObjectsAsync<Schedule>(parameters).ConfigureAwait(false);

            await Task.WhenAll(schedules.Select(async schedule =>
            {
                var response = await GetObjectPropertiesRawInternalAsync(schedule.Id, ObjectType.Schedule).ConfigureAwait(false);
                ResponseParser.LoadTimeTable(schedule, response);
            })).ConfigureAwait(false);

            return schedules;
        }

        //######################################
        // ValidateTriggerParameters
        //######################################

        private void ValidateTriggerParameters(TriggerParameters parameters)
        {
            if (parameters.Action == ModifyAction.Add)
            {
                var data = GetNotificationTriggerData(parameters.ObjectId);

                if (!data.SupportedTypes.Contains(parameters.Type))
                    throw new InvalidTriggerTypeException(parameters.ObjectId, parameters.Type, data.SupportedTypes.ToList());
            }

            var channel = RequestParser.GetTriggerChannel(parameters);

            if (channel == null)
                return;

            var sensor = GetSensors(Property.Id, parameters.ObjectId);

            if (sensor.Count > 0) //Validate this sensor has this channel
            {
                if(channel.channel is StandardTriggerChannel)
                    throw new InvalidOperationException($"Channel '{channel}' is not a valid value for sensor with ID {parameters.ObjectId}. Triggers assigned directly to sensors must refer to a specific Channel or Channel ID.");

                bool anyResponse = false;

                if (channel.channel is Channel)
                    anyResponse = (GetChannelsInternal(parameters.ObjectId, n => n == ((Channel)channel.channel).Name, i => i == ((Channel)channel.channel).Id)).Any();
                else
                    anyResponse = (GetChannelProperties(parameters.ObjectId, Convert.ToInt32(((IFormattable)channel).GetSerializedFormat()))).Descendants().Any();

                if (!anyResponse)
                    throw new InvalidOperationException($"Channel {(channel.channel is int ? "ID " : "")}'{channel}' is not a valid channel for sensor with ID {parameters.ObjectId}. Channel could not be found.");
            }
            else //It's a container. Only enum values are permitted.
            {
                if (!(channel.channel is StandardTriggerChannel))
                {
                    var prefix = channel.channel is int ? $"Channel ID '{channel}'" : $"Channel '{channel.channel}' of type '{channel.channel.GetType().Name}'";

                    throw new InvalidOperationException($"{prefix} is not a valid channel for Device, Group or Probe with ID {parameters.ObjectId}. Channel must be one of 'Primary', 'Total', 'TrafficIn' or 'TrafficOut' of type '{nameof(StandardTriggerChannel)}'."); //todo: make this dynamically get all names in the enum
                }
            }
        }

        private async Task ValidateTriggerParametersAsync(TriggerParameters parameters)
        {
            if (parameters.Action == ModifyAction.Add)
            {
                var data = await GetNotificationTriggerDataAsync(parameters.ObjectId).ConfigureAwait(false);

                if (!data.SupportedTypes.Contains(parameters.Type))
                    throw new InvalidTriggerTypeException(parameters.ObjectId, parameters.Type, data.SupportedTypes.ToList());
            }

            var channel = RequestParser.GetTriggerChannel(parameters);

            if (channel == null)
                return;

            var sensor = await GetSensorsAsync(Property.Id, parameters.ObjectId).ConfigureAwait(false);

            if (sensor.Count > 0) //Validate this sensor has this channel
            {
                if(channel.channel is StandardTriggerChannel)
                    throw new InvalidOperationException($"Channel '{channel}' is not a valid value for sensor with ID {parameters.ObjectId}. Triggers assigned directly to sensors must refer to a specific Channel or Channel ID.");

                bool anyResponse = false;

                if (channel.channel is Channel)
                    anyResponse = (await GetChannelsInternalAsync(parameters.ObjectId, n => n == ((Channel)channel.channel).Name, i => i == ((Channel)channel.channel).Id).ConfigureAwait(false)).Any();
                else
                    anyResponse = (await GetChannelPropertiesAsync(parameters.ObjectId, Convert.ToInt32(((IFormattable)channel).GetSerializedFormat())).ConfigureAwait(false)).Descendants().Any();

                if (!anyResponse)
                    throw new InvalidOperationException($"Channel {(channel.channel is int ? "ID " : "")}'{channel}' is not a valid channel for sensor with ID {parameters.ObjectId}. Channel could not be found.");
            }
            else //It's a container. Only enum values are permitted.
            {
                if (!(channel.channel is StandardTriggerChannel))
                {
                    var prefix = channel.channel is int ? $"Channel ID '{channel}'" : $"Channel '{channel.channel}' of type '{channel.channel.GetType().Name}'";

                    throw new InvalidOperationException($"{prefix} is not a valid channel for Device, Group or Probe with ID {parameters.ObjectId}. Channel must be one of 'Primary', 'Total', 'TrafficIn' or 'TrafficOut' of type '{nameof(StandardTriggerChannel)}'."); //todo: make this dynamically get all names in the enum
                }
            }
        }

        //######################################
        // UpdateTriggerChannels
        //######################################

        private void UpdateTriggerChannels(List<NotificationTrigger> triggers)
        {
            foreach (var trigger in triggers)
            {
                if(trigger.HasChannel())
                {
                    Log($"Retrieving Channel for sensor specific, channel based Notification Trigger (Sub ID: {trigger.SubId}", LogLevel.Trace);

                    bool isSensor = false;

                    trigger.channelObj = (GetChannelsInternal(trigger.ObjectId, n => { isSensor = true; return n == trigger.channelName; })).FirstOrDefault();

                    if(trigger.channelObj == null)
                    {
                        //Either we're not a sensor, or our channel is corrupt.
                        //If we detected we had ANY channels, we must be a sensor.
                        //If SetEnumChannel fails (which should be impossible)
                        //then maybe we're a sensor with zero channels or something?

                        if((isSensor && !trigger.Inherited) || !trigger.SetEnumChannel())
                            throw new InvalidStateException($"Could not deserialize channel of {trigger.Type.ToString().ToLower()} trigger '{trigger.SubId}' of object ID '{trigger.ObjectId}'. Object may be in a corrupted state. Please check the notification triggers of object ID {trigger.ObjectId} in the PRTG UI.");
                    }
                }
            }
        }

        private async Task UpdateTriggerChannelsAsync(List<NotificationTrigger> triggers)
        {
            foreach (var trigger in triggers)
            {
                if(trigger.HasChannel())
                {
                    Log($"Retrieving Channel for sensor specific, channel based Notification Trigger (Sub ID: {trigger.SubId}", LogLevel.Trace);

                    bool isSensor = false;

                    trigger.channelObj = (await GetChannelsInternalAsync(trigger.ObjectId, n => { isSensor = true; return n == trigger.channelName; }).ConfigureAwait(false)).FirstOrDefault();

                    if(trigger.channelObj == null)
                    {
                        //Either we're not a sensor, or our channel is corrupt.
                        //If we detected we had ANY channels, we must be a sensor.
                        //If SetEnumChannel fails (which should be impossible)
                        //then maybe we're a sensor with zero channels or something?

                        if((isSensor && !trigger.Inherited) || !trigger.SetEnumChannel())
                            throw new InvalidStateException($"Could not deserialize channel of {trigger.Type.ToString().ToLower()} trigger '{trigger.SubId}' of object ID '{trigger.ObjectId}'. Object may be in a corrupted state. Please check the notification triggers of object ID {trigger.ObjectId} in the PRTG UI.");
                    }
                }
            }
        }

        //######################################
        // ParseNotificationTriggerTypes
        //######################################

        private string ParseNotificationTriggerTypes(HttpResponseMessage response)
        {
            var responseText = response.Content.ReadAsStringAsync().Result;

            responseText = responseText.Replace("\"data\": \"(no triggers defined)\",", "");

            return responseText;
        }

        private async Task<string> ParseNotificationTriggerTypesAsync(HttpResponseMessage response)
        {
            var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

            responseText = responseText.Replace("\"data\": \"(no triggers defined)\",", "");

            return responseText;
        }

        //######################################
        // WaitForCoreRestart
        //######################################

        internal void WaitForCoreRestart(DateTime restartTime, Func<RestartCoreStage, bool> callback)
        {
            RestartCoreStage coreStage = RestartCoreStage.Shutdown;

            var originalRetries = RetryCount;

            try
            {
                RetryCount = 0;

                while (coreStage != RestartCoreStage.Completed)
                {
                    coreStage = ProbeServer(restartTime);

                    if (callback != null && !callback(coreStage))
                        break;

                    if (coreStage == RestartCoreStage.Completed)
                        break;
#if !DEBUG
                    if (callback == null)
                        Thread.Sleep(5000);
#endif
                }
            }
            finally
            {
                RetryCount = originalRetries;
            }
        }

        internal async Task WaitForCoreRestartAsync(DateTime restartTime, Func<RestartCoreStage, bool> callback)
        {
            RestartCoreStage coreStage = RestartCoreStage.Shutdown;

            var originalRetries = RetryCount;

            try
            {
                RetryCount = 0;

                while (coreStage != RestartCoreStage.Completed)
                {
                    coreStage = await ProbeServerAsync(restartTime).ConfigureAwait(false);

                    if (callback != null && !callback(coreStage))
                        break;

                    if (coreStage == RestartCoreStage.Completed)
                        break;
#if !DEBUG
                    if (callback == null)
                        await Task.Delay(5000).ConfigureAwait(false);
#endif
                }
            }
            finally
            {
                RetryCount = originalRetries;
            }
        }

        //######################################
        // ProbeServer
        //######################################

        private RestartCoreStage ProbeServer(DateTime restartTime)
        {
            RestartCoreStage coreStage;
            
            try
            {
                var logs = GetLogs(null, endDate: restartTime, status: LogStatus.SystemStart);

                coreStage = logs.Any() ? RestartCoreStage.Completed : RestartCoreStage.Shutdown;
            }
            catch (Exception ex) when (ex is WebException || ex is TimeoutException)
            {
                coreStage = RestartCoreStage.Restart;
            }
            catch (HttpRequestException)
            {
                coreStage = RestartCoreStage.Startup;
            }

            return coreStage;
        }

        private async Task<RestartCoreStage> ProbeServerAsync(DateTime restartTime)
        {
            RestartCoreStage coreStage;
            
            try
            {
                var logs = await GetLogsAsync(null, endDate: restartTime, status: LogStatus.SystemStart).ConfigureAwait(false);

                coreStage = logs.Any() ? RestartCoreStage.Completed : RestartCoreStage.Shutdown;
            }
            catch (Exception ex) when (ex is WebException || ex is TimeoutException)
            {
                coreStage = RestartCoreStage.Restart;
            }
            catch (HttpRequestException)
            {
                coreStage = RestartCoreStage.Startup;
            }

            return coreStage;
        }

        //######################################
        // WaitForCoreRestart
        //######################################

        internal void WaitForProbeRestart(DateTime restartTime, List<Probe> probes, Func<List<RestartProbeProgress>, bool>  progressCallback)
        {
            List<RestartProbeProgress> probeStatuses = probes.Select(p => new RestartProbeProgress(p)).ToList();

            while (probeStatuses.Any(p => p.Reconnected == false))
            {
                //Get all logs relating to probes connecting and disconnecting since we initiated the restarts.
                //If we've already detected all probes have disconnected, no need to include those logs in the response
                var statuses = new List<LogStatus> { LogStatus.Connected };

                if (probeStatuses.Any(p => !p.Disconnected))
                    statuses.Add(LogStatus.Disconnected);

                var logs = GetLogs(null, endDate: restartTime, status: statuses.ToArray());

                ResponseParser.UpdateProbeStatus(probeStatuses, logs);

                if (progressCallback == null)
                    Thread.Sleep(5000);
                else
                {
                    var result = progressCallback(probeStatuses);

                    if (!result)
                        break;
                }
            }
        }

        internal async Task WaitForProbeRestartAsync(DateTime restartTime, List<Probe> probes, Func<List<RestartProbeProgress>, bool>  progressCallback)
        {
            List<RestartProbeProgress> probeStatuses = probes.Select(p => new RestartProbeProgress(p)).ToList();

            while (probeStatuses.Any(p => p.Reconnected == false))
            {
                //Get all logs relating to probes connecting and disconnecting since we initiated the restarts.
                //If we've already detected all probes have disconnected, no need to include those logs in the response
                var statuses = new List<LogStatus> { LogStatus.Connected };

                if (probeStatuses.Any(p => !p.Disconnected))
                    statuses.Add(LogStatus.Disconnected);

                var logs = await GetLogsAsync(null, endDate: restartTime, status: statuses.ToArray()).ConfigureAwait(false);

                ResponseParser.UpdateProbeStatus(probeStatuses, logs);

                if (progressCallback == null)
                    await Task.Delay(5000).ConfigureAwait(false);
                else
                {
                    var result = progressCallback(probeStatuses);

                    if (!result)
                        break;
                }
            }
        }

        //######################################
        // AddObjectWithExcessiveValue
        //######################################

        private void AddObjectWithExcessiveValue(List<KeyValuePair<Parameter, object>> lengthLimit, ICommandParameters internalParams)
        {
            var limitParam = lengthLimit.First();

            var limit = limitParam.Key.GetEnumAttribute<LengthLimitAttribute>().Length;

            if (limitParam.Value.IsIEnumerable())
            {
                var list = limitParam.Value.ToIEnumerable().ToList();

                var count = list.Count();

                if (count > limit)
                {
                    for (int i = 0; i < count; i += limit)
                    {
                        var thisRequest = list.Skip(i).Take(limit);

                        internalParams[limitParam.Key] = thisRequest;

                        RequestEngine.ExecuteRequest(internalParams);
                    }
                }
                else
                    RequestEngine.ExecuteRequest(internalParams);
            }
            else
                throw new NotImplementedException($"Don't know how to handle {nameof(LengthLimitAttribute)} applied to value of type {limitParam.Value.GetType()}");
        }

        private async Task AddObjectWithExcessiveValueAsync(List<KeyValuePair<Parameter, object>> lengthLimit, ICommandParameters internalParams)
        {
            var limitParam = lengthLimit.First();

            var limit = limitParam.Key.GetEnumAttribute<LengthLimitAttribute>().Length;

            if (limitParam.Value.IsIEnumerable())
            {
                var list = limitParam.Value.ToIEnumerable().ToList();

                var count = list.Count();

                if (count > limit)
                {
                    for (int i = 0; i < count; i += limit)
                    {
                        var thisRequest = list.Skip(i).Take(limit);

                        internalParams[limitParam.Key] = thisRequest;

                        await RequestEngine.ExecuteRequestAsync(internalParams).ConfigureAwait(false);
                    }
                }
                else
                    await RequestEngine.ExecuteRequestAsync(internalParams).ConfigureAwait(false);
            }
            else
                throw new NotImplementedException($"Don't know how to handle {nameof(LengthLimitAttribute)} applied to value of type {limitParam.Value.GetType()}");
        }

        //######################################
        // ResolveSensorTargets
        //######################################

        internal List<T> ResolveSensorTargets<T>(int deviceId, SensorType sensorType, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return ResolveSensorTargets(deviceId, parameters, progressCallback, parser);
        }

        internal List<T> ResolveSensorTargets<T>(int deviceId, string sensorType, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return ResolveSensorTargets(deviceId, parameters, progressCallback, parser);
        }

        private List<T> ResolveSensorTargets<T>(int deviceId, SensorTargetParameters parameters, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var response = GetSensorTargetsResponse(deviceId, parameters, progressCallback);

            if (response == null)
                return null;

            return parser(response);
        }

        internal async Task<List<T>> ResolveSensorTargetsAsync<T>(int deviceId, SensorType sensorType, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return await ResolveSensorTargetsAsync(deviceId, parameters, progressCallback, parser).ConfigureAwait(false);
        }

        internal async Task<List<T>> ResolveSensorTargetsAsync<T>(int deviceId, string sensorType, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return await ResolveSensorTargetsAsync(deviceId, parameters, progressCallback, parser).ConfigureAwait(false);
        }

        private async Task<List<T>> ResolveSensorTargetsAsync<T>(int deviceId, SensorTargetParameters parameters, Func<int, bool> progressCallback, Func<string, List<T>> parser)
        {
            var response = await GetSensorTargetsResponseAsync(deviceId, parameters, progressCallback).ConfigureAwait(false);

            if (response == null)
                return null;

            return parser(response);
        }

        //######################################
        // GetSensorTargetsResponse
        //######################################

        private string GetSensorTargetsResponse(int deviceId, string sensorType, Func<int, bool> progressCallback)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return GetSensorTargetsResponse(deviceId, parameters, progressCallback);
        }

        private string GetSensorTargetsResponse(int deviceId, SensorTargetParameters parameters, Func<int, bool> progressCallback)
        {
            Func<HttpResponseMessage, string> getSensorTargetTmpId = ResponseParser.GetSensorTargetTmpId;

            var tmpIdStr = RequestEngine.ExecuteRequest(parameters, getSensorTargetTmpId);

            int tmpId;

            if (!int.TryParse(tmpIdStr, out tmpId))
                throw new PrtgRequestException($"Failed to resolve sensor targets for sensor type '{parameters[Parameter.SensorType]}': type was not valid");

            var response = WaitForSensorTargetResolution(deviceId, tmpId, progressCallback);

            return response;
        }

        private async Task<string> GetSensorTargetsResponseAsync(int deviceId, string sensorType, Func<int, bool> progressCallback)
        {
            var parameters = new SensorTargetParameters(deviceId, sensorType);

            return await GetSensorTargetsResponseAsync(deviceId, parameters, progressCallback).ConfigureAwait(false);
        }

        private async Task<string> GetSensorTargetsResponseAsync(int deviceId, SensorTargetParameters parameters, Func<int, bool> progressCallback)
        {
            Func<HttpResponseMessage, Task<string>> getSensorTargetTmpId = o => Task.FromResult(ResponseParser.GetSensorTargetTmpId(o));

            var tmpIdStr = await RequestEngine.ExecuteRequestAsync(parameters, getSensorTargetTmpId).ConfigureAwait(false);

            int tmpId;

            if (!int.TryParse(tmpIdStr, out tmpId))
                throw new PrtgRequestException($"Failed to resolve sensor targets for sensor type '{parameters[Parameter.SensorType]}': type was not valid");

            var response = await WaitForSensorTargetResolutionAsync(deviceId, tmpId, progressCallback).ConfigureAwait(false);

            return response;
        }

        //######################################
        // WaitForSensorTargetResolution
        //######################################

        private string WaitForSensorTargetResolution(int deviceId, int tmpId, Func<int, bool> progressCallback)
        {
            var parameters = new SensorTargetProgressParameters(deviceId, tmpId);

            SensorTargetProgress p;
            bool continueQuery = true;

            var stopwatch = new Stopwatch();
            var timeout = TimeSpan.FromSeconds(60);

            stopwatch.Start();

            do
            {
                p = ObjectEngine.GetObject<SensorTargetProgress>(parameters);

                if(progressCallback != null)
                    continueQuery = progressCallback(p.Percent);

                if (p.Percent < 100)
                {
                    if (!continueQuery)
                        break;

                        if (stopwatch.Elapsed > timeout)
                            throw new TimeoutException("Failed to retrieve sensor information within a reasonable period of time. Check target device is accessible and that valid credentials have been supplied");

#if !DEBUG
                    Thread.Sleep(1000);
#endif
                }
            } while (p.Percent < 100);

            if (!continueQuery)
                return null;

            ResponseParser.ValidateSensorTargetProgressResult(p);

            var page = RequestEngine.ExecuteRequest(new SensorTargetCompletedParameters(deviceId, tmpId));

            return page;
        }

        private async Task<string> WaitForSensorTargetResolutionAsync(int deviceId, int tmpId, Func<int, bool> progressCallback)
        {
            var parameters = new SensorTargetProgressParameters(deviceId, tmpId);

            SensorTargetProgress p;
            bool continueQuery = true;

            var stopwatch = new Stopwatch();
            var timeout = TimeSpan.FromSeconds(60);

            stopwatch.Start();

            do
            {
                p = await ObjectEngine.GetObjectAsync<SensorTargetProgress>(parameters).ConfigureAwait(false);

                if(progressCallback != null)
                    continueQuery = progressCallback(p.Percent);

                if (p.Percent < 100)
                {
                    if (!continueQuery)
                        break;

                        if (stopwatch.Elapsed > timeout)
                            throw new TimeoutException("Failed to retrieve sensor information within a reasonable period of time. Check target device is accessible and that valid credentials have been supplied");

#if !DEBUG
                    await Task.Delay(1000).ConfigureAwait(false);
#endif
                }
            } while (p.Percent < 100);

            if (!continueQuery)
                return null;

            ResponseParser.ValidateSensorTargetProgressResult(p);

            var page = await RequestEngine.ExecuteRequestAsync(new SensorTargetCompletedParameters(deviceId, tmpId)).ConfigureAwait(false);

            return page;
        }

        //######################################
        // AddObject
        //######################################

        internal List<T> AddObject<T>(int parentId, NewObjectParameters parameters,
            Func<SearchFilter[], List<T>> getObjects, bool resolve, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null,
            bool allowMultiple = false) where T : SensorOrDeviceOrGroupOrProbe
        {
            if (resolve)
            {
                var filters = RequestParser.GetFilters(parentId, parameters);

                Action addObjectInternal = () => AddObjectInternal(parentId, parameters);
                Func<List<T>> getObjs = () => getObjects(filters);

                return (ResolveWithDiff(addObjectInternal, getObjs, ResponseParser.ExceptTableObject, errorCallback, shouldStop, allowMultiple)).OrderBy(o => o.Id).ToList();
            }
            else
            {
                AddObjectInternal(parentId, parameters);

                return null;
            }
        }

        private void AddObjectInternal(int objectId, NewObjectParameters parameters)
        {
            var lengthLimit = RequestParser.ValidateObjectParameters(parameters);

            var internalParams = RequestParser.GetInternalNewObjectParameters(objectId, parameters);

            if (lengthLimit.Count > 0)
                AddObjectWithExcessiveValue(lengthLimit, internalParams);
            else
                RequestEngine.ExecuteRequest(internalParams);
        }

        private List<T> ResolveWithDiff<T>(Action createObject, Func<List<T>> getObjects, Func<List<T>, List<T>, List<T>> exceptFunc,
            Action<Type, int> errorCallback, Func<bool> shouldStop, bool allowMultiple = false)
        {
            var before = getObjects();

            createObject();

            var after = ResolveObject(getObjects, a => exceptFunc(before, a).Any(), errorCallback: errorCallback, shouldStop: shouldStop);

            var newObjects = exceptFunc(before, after);

            if(!allowMultiple && newObjects.Count > 1)
            {
                var typeName = typeof (T).Name;

                IEnumerable<string> names;

                if (typeof (PrtgObject).IsAssignableFrom(typeof (T)))
                {
                    var objs = newObjects.Cast<PrtgObject>();

                    names = objs.Select(o => $"'{o.Name}' (ID: {o.Id})");
                }
                else
                    names = newObjects.Select(o => $"'{o}'");

                var str = $"Could not uniquely identify created {typeName}: multiple new objects ({string.Join(", ", names)}) were found under parent object. Did you create an additional object with the same type or name under the parent while resolution was occurring?";

                throw new ObjectResolutionException(str);
            }

            return CleanObjects(newObjects);
        }

        internal List<T> ResolveObject<T>(Func< List<T>> getObjects, Func<List<T>, bool> recordsFound, string resolutionError = "Could not resolve object",
            Type trueType = null, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null)
        {
            List<T> @object;

            var retriesRemaining = 4;
            var delay = 3;

            do
            {
                @object = getObjects();

                if (!recordsFound(@object))
                {
                    if (retriesRemaining == 0)
                    {
                        throw new ObjectResolutionException($"{resolutionError}: PRTG is taking too long to create the object. Confirm the object has been created in the Web UI and then attempt resolution again manually");
                    }

                    var type = trueType ?? typeof (T);

                    errorCallback?.Invoke(type, retriesRemaining);
                    retriesRemaining--;

#if DEBUG
                    if (!UnitTest())
#endif
                        Thread.Sleep(delay * 1000);

                    delay *= 2;
                }

                if (shouldStop?.Invoke() == true)
                    break;

            } while (!recordsFound(@object));

            return @object;
        }
        
        private List<T> CleanObjects<T>(List<T> newObjects)
        {
            if (newObjects.All(o => o is Sensor))
            {
                var sensors = newObjects.Cast<Sensor>().ToList();

                bool modified = false;

                foreach (var obj in sensors)
                {
                    //PRTG may sometimes prepend spaces to the front of the sensor name. This can even happen
                    //in the Web UI
                    if (obj.Name != obj.Name.Trim(' '))
                    {
                        modified = true;
                        RenameObject(obj.Id, obj.Name.Trim(' '));
                    }
                }

                if(modified)
                    newObjects = (GetSensors(Property.Id, sensors.Select(s => s.Id))).Cast<T>().ToList();
            }

            return newObjects;
        }

        internal async Task<List<T>> AddObjectAsync<T>(int parentId, NewObjectParameters parameters,
            Func<SearchFilter[], Task<List<T>>> getObjects, bool resolve, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null,
            bool allowMultiple = false) where T : SensorOrDeviceOrGroupOrProbe
        {
            if (resolve)
            {
                var filters = RequestParser.GetFilters(parentId, parameters);

                Func<Task> addObjectInternal = async () => await AddObjectInternalAsync(parentId, parameters).ConfigureAwait(false);
                Func<Task<List<T>>> getObjs = async () => await getObjects(filters).ConfigureAwait(false);

                return (await ResolveWithDiffAsync(addObjectInternal, getObjs, ResponseParser.ExceptTableObject, errorCallback, shouldStop, allowMultiple).ConfigureAwait(false)).OrderBy(o => o.Id).ToList();
            }
            else
            {
                await AddObjectInternalAsync(parentId, parameters).ConfigureAwait(false);

                return null;
            }
        }

        private async Task AddObjectInternalAsync(int objectId, NewObjectParameters parameters)
        {
            var lengthLimit = RequestParser.ValidateObjectParameters(parameters);

            var internalParams = RequestParser.GetInternalNewObjectParameters(objectId, parameters);

            if (lengthLimit.Count > 0)
                await AddObjectWithExcessiveValueAsync(lengthLimit, internalParams).ConfigureAwait(false);
            else
                await RequestEngine.ExecuteRequestAsync(internalParams).ConfigureAwait(false);
        }

        private async Task<List<T>> ResolveWithDiffAsync<T>(Func<Task> createObject, Func<Task<List<T>>> getObjects, Func<List<T>, List<T>, List<T>> exceptFunc,
            Action<Type, int> errorCallback, Func<bool> shouldStop, bool allowMultiple = false)
        {
            var before = await getObjects().ConfigureAwait(false);

            await createObject().ConfigureAwait(false);

            var after = await ResolveObjectAsync(getObjects, a => exceptFunc(before, a).Any(), errorCallback: errorCallback, shouldStop: shouldStop).ConfigureAwait(false);

            var newObjects = exceptFunc(before, after);

            if(!allowMultiple && newObjects.Count > 1)
            {
                var typeName = typeof (T).Name;

                IEnumerable<string> names;

                if (typeof (PrtgObject).IsAssignableFrom(typeof (T)))
                {
                    var objs = newObjects.Cast<PrtgObject>();

                    names = objs.Select(o => $"'{o.Name}' (ID: {o.Id})");
                }
                else
                    names = newObjects.Select(o => $"'{o}'");

                var str = $"Could not uniquely identify created {typeName}: multiple new objects ({string.Join(", ", names)}) were found under parent object. Did you create an additional object with the same type or name under the parent while resolution was occurring?";

                throw new ObjectResolutionException(str);
            }

            return await CleanObjectsAsync(newObjects).ConfigureAwait(false);
        }

        internal async Task<List<T>> ResolveObjectAsync<T>(Func< Task<List<T>>> getObjects, Func<List<T>, bool> recordsFound, string resolutionError = "Could not resolve object",
            Type trueType = null, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null)
        {
            List<T> @object;

            var retriesRemaining = 4;
            var delay = 3;

            do
            {
                @object = await getObjects().ConfigureAwait(false);

                if (!recordsFound(@object))
                {
                    if (retriesRemaining == 0)
                    {
                        throw new ObjectResolutionException($"{resolutionError}: PRTG is taking too long to create the object. Confirm the object has been created in the Web UI and then attempt resolution again manually");
                    }

                    var type = trueType ?? typeof (T);

                    errorCallback?.Invoke(type, retriesRemaining);
                    retriesRemaining--;

#if DEBUG
                    if (!UnitTest())
#endif
                        await Task.Delay(delay * 1000).ConfigureAwait(false);

                    delay *= 2;
                }

                if (shouldStop?.Invoke() == true)
                    break;

            } while (!recordsFound(@object));

            return @object;
        }
        
        private async Task<List<T>> CleanObjectsAsync<T>(List<T> newObjects)
        {
            if (newObjects.All(o => o is Sensor))
            {
                var sensors = newObjects.Cast<Sensor>().ToList();

                bool modified = false;

                foreach (var obj in sensors)
                {
                    //PRTG may sometimes prepend spaces to the front of the sensor name. This can even happen
                    //in the Web UI
                    if (obj.Name != obj.Name.Trim(' '))
                    {
                        modified = true;
                        await RenameObjectAsync(obj.Id, obj.Name.Trim(' ')).ConfigureAwait(false);
                    }
                }

                if(modified)
                    newObjects = (await GetSensorsAsync(Property.Id, sensors.Select(s => s.Id)).ConfigureAwait(false)).Cast<T>().ToList();
            }

            return newObjects;
        }

        //######################################
        // AddNotificationTriggerInternal
        //######################################

        internal List<NotificationTrigger> AddNotificationTriggerInternal(TriggerParameters parameters, bool resolve,
            Action<Type, int> errorCallback = null, Func<bool> shouldStop = null)
        {
            if (resolve)
            {
                Action addTrigger = () => SetNotificationTrigger(parameters);
                Func<List<NotificationTrigger>> getTrigger = () => GetNotificationTriggers(parameters.ObjectId).Where(t => !t.Inherited).ToList();

                var objs = ResolveWithDiff(addTrigger, getTrigger, (b,a) => ResponseParser.ExceptTrigger(b, a, parameters), errorCallback, shouldStop);

                return objs;
            }
            else
            {
                SetNotificationTrigger(parameters);

                return null;
            }
        }

        internal async Task<List<NotificationTrigger>> AddNotificationTriggerInternalAsync(TriggerParameters parameters, bool resolve,
            Action<Type, int> errorCallback = null, Func<bool> shouldStop = null)
        {
            if (resolve)
            {
                Func<Task> addTrigger = async () => await SetNotificationTriggerAsync(parameters).ConfigureAwait(false);
                Func<Task<List<NotificationTrigger>>> getTrigger = async () => (await GetNotificationTriggersAsync(parameters.ObjectId).ConfigureAwait(false)).Where(t => !t.Inherited).ToList();

                var objs = await ResolveWithDiffAsync(addTrigger, getTrigger, (b,a) => ResponseParser.ExceptTrigger(b, a, parameters), errorCallback, shouldStop).ConfigureAwait(false);

                return objs;
            }
            else
            {
                SetNotificationTrigger(parameters);

                return null;
            }
        }

        //######################################
        // GetObject
        //######################################

        internal PrtgObject GetObjectInternal(int objectId, bool resolve)
        {
            var objs = (GetObjects(Property.Id, objectId));

            if (objs.Count != 1)
                return objs.SingleObject(objectId);

            var obj = objs.Single();

            if (resolve)
            {
                switch (obj.Type.Value)
                {
                    case ObjectType.Sensor:       return GetSensor(objectId);
                    case ObjectType.Device:       return GetDevice(objectId);
                    case ObjectType.Group:        return GetGroup(objectId);
                    case ObjectType.Probe:        return GetProbe(objectId);
                    case ObjectType.Notification: return GetNotificationAction(objectId);
                    case ObjectType.Schedule:     return GetSchedule(objectId);
                    default:
                        return obj;
                }
            }

            return obj;
        }

        internal async Task<PrtgObject> GetObjectInternalAsync(int objectId, bool resolve)
        {
            var objs = (await GetObjectsAsync(Property.Id, objectId).ConfigureAwait(false));

            if (objs.Count != 1)
                return objs.SingleObject(objectId);

            var obj = objs.Single();

            if (resolve)
            {
                switch (obj.Type.Value)
                {
                    case ObjectType.Sensor:       return await GetSensorAsync(objectId).ConfigureAwait(false);
                    case ObjectType.Device:       return await GetDeviceAsync(objectId).ConfigureAwait(false);
                    case ObjectType.Group:        return await GetGroupAsync(objectId).ConfigureAwait(false);
                    case ObjectType.Probe:        return await GetProbeAsync(objectId).ConfigureAwait(false);
                    case ObjectType.Notification: return await GetNotificationActionAsync(objectId).ConfigureAwait(false);
                    case ObjectType.Schedule:     return await GetScheduleAsync(objectId).ConfigureAwait(false);
                    default:
                        return obj;
                }
            }

            return obj;
        }
    }
}
